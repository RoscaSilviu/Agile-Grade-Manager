@page "/login"
@inject CatalogueApp.Components.Services.AuthService AuthService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<link href="css/login.css" rel="stylesheet" />

<div class="login-container">
    <div class="login-card">
        <h3 class="text-center mb-4" style="color: white;">Welcome Back</h3>
        
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label>Email</label>
                <InputText @bind="loginModel.Email" ValueExpression="() => loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText type="password" @bind="loginModel.Password" ValueExpression="() => loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <button type="submit" class="btn btn-primary">Login</button>
        </EditForm>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>

@code {
    private CatalogueApp.Components.Services.LoginRequest loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var token = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

        if (token != null)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid email or password";
        }
    }
}