@page "/manage-assignments"
@page "/manage-assignments/{ClassName}"
@inject CatalogueApp.Components.Services.ClassService ClassService
@inject CatalogueApp.Components.Services.AssignmentService AssignmentService
@inject NavigationManager Navigation
@using CatalogueApp.Components.Models
@rendermode InteractiveServer

<link href="css/login.css" rel="stylesheet" />

<style>
    .management-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .management-content {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        width: 90%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .assignment-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
</style>

<div class="login-container">
    <div class="login-card">
        <h3 class="text-center mb-4" style="color: white;">Manage Class Assignments</h3>
    </div>
</div>

<div class="management-modal">
    <div class="management-content">
        <div class="flex justify-between mb-4">
            <h3>Assignments for @ClassName</h3>
        </div>

        <!-- Add Assignment Form -->
        <div class="mb-2">
            <label for="title">Title</label>
            <input id="title" class="form-control" @bind="newAssignment.Title" />
        </div>

        <div class="mb-2">
            <label for="description">Description</label>
            <textarea id="description" class="form-control" @bind="newAssignment.Description"></textarea>
        </div>

        <div class="mb-2">
            <label for="dueDate">Due Date</label>
            <input id="dueDate" type="date" class="form-control" @bind="newAssignment.DueDate" />
        </div>

        <div class="mb-2">
            <label for="maxPoints">Max Points</label>
            <input id="maxPoints" type="number" class="form-control" @bind="newAssignment.MaxPoints" />
        </div>

        <div class="mb-4">
            <button class="btn btn-primary" @onclick="AddAssignment">Add Assignment</button>
        </div>

        <!-- Assignments List -->
        <div class="space-y-2">
            @foreach (var assignment in classAssignments)
            {
                <div class="assignment-item">
                    <div class="flex-1">
                        <h4>@assignment.Title</h4>
                        <p>@assignment.Description</p>
                        <small>Due: @assignment.DueDate.ToString("f")</small>
                        <span class="badge bg-secondary">@assignment.MaxPoints points</span>
                    </div>
                    <div class="flex gap-2">
                        <button class="btn btn-sm btn-warning"
                                @onclick="() => EditAssignment(assignment)">
                            ✏️ Edit
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => DeleteAssignment(assignment.Id)">
                            🗑️ Delete
                        </button>
                        <button class="btn btn-secondary ml-2" @onclick="() => OpenGradeModal(assignment)">
                            🎓 Grade
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (showGradeModal)
{
    <div class="management-modal">
        <div class="management-content">
            <div class="flex justify-between mb-4">
                <h3>Grades for: @selectedAssignmentForGrading.Title</h3>
                <button @onclick="CloseGradeModal" class="text-gray-500">✖</button>
            </div>

            <div class="space-y-2">
                @foreach (var grade in studentGrades)
                {
                    <div class="flex items-center justify-between">
                        <span>@grade.StudentName</span>
                        <input type="number" class="form-control w-20"
                               @bind="grade.Grade"
                               placeholder="N/A" />
                    </div>
                }
            </div>

            <div class="mt-4 text-right">
                <button class="btn btn-primary" @onclick="SaveGradesAsync">💾 Save</button>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// The name of the class for which assignments are being managed.
    /// </summary>
    [Parameter]
    public string ClassName { get; set; }

    /// <summary>
    /// The current class being managed.
    /// </summary>
    private ClassModel currentClass = new();

    /// <summary>
    /// The list of assignments for the current class.
    /// </summary>
    private List<AssignmentModel> classAssignments = new();

    /// <summary>
    /// The new assignment being created.
    /// </summary>
    private AssignmentModel newAssignment = new();

    /// <summary>
    /// The assignment being edited.
    /// </summary>
    private AssignmentModel editAssignment = null;

    /// <summary>
    /// The assignment selected for grading.
    /// </summary>
    private AssignmentModel selectedAssignmentForGrading;

    /// <summary>
    /// Indicates whether the grade modal is visible.
    /// </summary>
    private bool showGradeModal = false;

    /// <summary>
    /// The list of student grades for the selected assignment.
    /// </summary>
    private List<StudentGradeModel> studentGrades = new();

    /// <summary>
    /// Opens the grade modal for the specified assignment.
    /// </summary>
    /// <param name="assignment">The assignment for which grades are being managed.</param>
    private async Task OpenGradeModal(AssignmentModel assignment)
    {
        selectedAssignmentForGrading = assignment;
        studentGrades = await AssignmentService.GetGradesForAssignmentAsync(assignment.Id);
        showGradeModal = true;
    }

    /// <summary>
    /// Closes the grade modal.
    /// </summary>
    private void CloseGradeModal()
    {
        selectedAssignmentForGrading = null;
        studentGrades.Clear();
        showGradeModal = false;
    }

    /// <summary>
    /// Saves the grades for the selected assignment asynchronously.
    /// </summary>
    private async Task SaveGradesAsync()
    {
        await AssignmentService.SaveGradesAsync(selectedAssignmentForGrading.Id, studentGrades);
        showGradeModal = false;
        StateHasChanged();
    }

    /// <summary>
    /// Indicates whether the component has been loaded.
    /// </summary>
    private bool _loaded = false;

    /// <summary>
    /// Loads the class and its assignments after the component is rendered for the first time.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render of the component.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded && !string.IsNullOrEmpty(ClassName))
        {
            currentClass = await ClassService.GetClassByNameAsync(ClassName);
            classAssignments = await ClassService.GetAssignmentsForClassAsync(ClassName);
            _loaded = true;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Adds a new assignment to the current class.
    /// </summary>
    private async Task AddAssignment()
    {
        if (!string.IsNullOrEmpty(newAssignment.Title))
        {
            newAssignment.ClassName = currentClass.Name;
            await ClassService.AddAssignmentToClassAsync(newAssignment);
            classAssignments = await ClassService.GetAssignmentsForClassAsync(currentClass.Name);
            newAssignment = new AssignmentModel();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Deletes the specified assignment from the current class.
    /// </summary>
    /// <param name="assignmentId">The ID of the assignment to delete.</param>
    private async Task DeleteAssignment(int assignmentId)
    {
        await ClassService.DeleteAssignmentAsync(assignmentId);
        classAssignments = await ClassService.GetAssignmentsForClassAsync(currentClass.Name);
        StateHasChanged();
    }

    /// <summary>
    /// Prepares the specified assignment for editing.
    /// </summary>
    /// <param name="assignment">The assignment to edit.</param>
    private void EditAssignment(AssignmentModel assignment)
    {
        editAssignment = assignment;
        newAssignment = new AssignmentModel
            {
                Id = assignment.Id,
                Title = assignment.Title,
                Description = assignment.Description,
                DueDate = assignment.DueDate,
                MaxPoints = assignment.MaxPoints
            };
    }

    /// <summary>
    /// Updates the currently edited assignment.
    /// </summary>
    private async Task UpdateAssignment()
    {
        if (editAssignment != null)
        {
            editAssignment.Title = newAssignment.Title;
            editAssignment.Description = newAssignment.Description;
            editAssignment.DueDate = newAssignment.DueDate;
            editAssignment.MaxPoints = newAssignment.MaxPoints;

            await ClassService.UpdateAssignmentAsync(editAssignment);
            classAssignments = await ClassService.GetAssignmentsForClassAsync(currentClass.Name);
            newAssignment = new AssignmentModel();
            editAssignment = null;
            StateHasChanged();
        }
    }
}