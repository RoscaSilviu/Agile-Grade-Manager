@page "/teacher-grade-history"
@using BlazorApp1.Components.ViewModels
@using BlazorApp1.Components.Services
@using CatalogueServer.Repositories
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using CatalogueServer.Controllers;
@using System.ComponentModel.DataAnnotations
@using static BlazorApp1.Components.ViewModels.TeacherGradeHistoryViewModel
@inject TeacherGradeHistoryService GradeService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="grades-container">
    <div class="grades-card">
        <h3>Teacher Grade History</h3>

        @if (viewModel.IsLoading)
        {
            <p>Loading...</p>
        }
        else
        {
             <div class="mb-4 p-3 border rounded">
                <h5>Add Grade</h5>
                <EditForm Model="@newGrade" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="studentName" class="form-label">Student Name</label>
                        <InputText id="studentName" class="form-control" @bind-Value="newGrade.StudentName" />
                        <ValidationMessage For="@(() => newGrade.StudentName)" />
                    </div>

                    <div class="mb-3">
                        <label for="assignmentName" class="form-label">Assignment Name</label>
                        <InputText id="assignmentName" class="form-control" @bind-Value="newGrade.AssignmentName" />
                        <ValidationMessage For="@(() => newGrade.AssignmentName)" />
                    </div>

                    <div class="mb-3">
                        <label for="grade" class="form-label">Grade</label>
                        <InputNumber id="grade" class="form-control" @bind-Value="newGrade.Grade" min="0" max="100" />
                        <ValidationMessage For="@(() => newGrade.Grade)" />
                    </div>

                    <div class="mb-3">
                        <label for="comments" class="form-label">Comments (Optional)</label>
                        <InputTextArea id="comments" class="form-control" @bind-Value="newGrade.Comments" />
                    </div>

                    <button type="submit" class="btn btn-success">Add Grade</button>
                </EditForm>
            </div>

            <div class="mb-4 p-3 border rounded">
                <h5>Bulk Grade Upload</h5>
                <div class="alert alert-info">
                    Expected CSV format: StudentName,AssignmentName,Grade,Comments
                </div>
                <InputFile OnChange="@HandleFileSelected" class="form-control mb-2" accept=".csv" />
                <button class="btn btn-primary" @onclick="ProcessUpload" disabled="@(!hasFile)">
                    Upload Grades
                </button>
            </div>

            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Student Name</th>
                            <th>Subject</th>
                            <th>Assignment</th>
                            <th>Grade</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var grade in viewModel.Grades)
                        {
                            <tr>
                                <td>@grade.StudentName</td>
                                <td>@grade.Subject</td>
                                <td>@grade.AssignmentName</td>
                                <td>
                                    @if (viewModel.EditingGradeId == grade.GradeId)
                                    {
                                        <input type="number" @bind="viewModel.EditValue"
                                        class="form-control" min="0" max="100" />
                                    }
                                    else
                                    {
                                        @grade.Value
                                    }
                                </td>
                                <td>@grade.Date.ToShortDateString()</td>
                                <td>
                                    @if (viewModel.EditingGradeId == grade.GradeId)
                                    {
                                        <button class="btn btn-success btn-sm"
                                        @onclick="async () => await viewModel.SaveEditAsync(GradeService)">
                                            Save
                                        </button>
                                        <button class="btn btn-secondary btn-sm"
                                        @onclick="() => viewModel.CancelEdit()">
                                            Cancel
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary btn-sm"
                                        @onclick="() => viewModel.StartEdit(grade)">
                                            Edit
                                        </button>
                                        <button class="btn btn-danger btn-sm"
                                        @onclick="async () => await viewModel.DeleteGradeAsync(GradeService, grade.GradeId)">
                                            Delete
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (!string.IsNullOrEmpty(viewModel.ErrorMessage))
        {
            <div class="alert alert-danger mt-3">@viewModel.ErrorMessage</div>
        }
    </div>
</div>

@code {
    private TeacherGradeHistoryViewModel viewModel = new();

    private bool hasFile;
    private IBrowserFile? uploadedFile;

    private GradeUploadModel newGrade = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            await viewModel.UploadGradesAsync(GradeService, new List<GradeUploadModel> { newGrade });
            newGrade = new GradeUploadModel();
        }
        catch (Exception ex)
        {
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        hasFile = true;
    }

    private async Task ProcessUpload()
    {
        if (uploadedFile == null) return;

        try
        {
            // Create a buffer for reading the file
            using var stream = uploadedFile.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1MB max size
            using var reader = new StreamReader(stream);
            var grades = new List<GradeUploadModel>();

            // Skip header row
            await reader.ReadLineAsync();

            string? line;
            while ((line = await reader.ReadLineAsync()) != null)
            {
                if (string.IsNullOrEmpty(line)) continue;

                var values = line.Split(',');
                if (values.Length >= 3)
                {
                    grades.Add(new GradeUploadModel
                        {
                            StudentName = values[0].Trim(),
                            AssignmentName = values[1].Trim(),
                            Grade = int.Parse(values[2].Trim()),
                            Comments = values.Length > 3 ? values[3].Trim() : null
                        });
                }
            }

            await viewModel.UploadGradesAsync(GradeService, grades);
            hasFile = false;
            uploadedFile = null;
        }
        catch (Exception ex)
        {
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await viewModel.LoadGradesAsync(GradeService, Navigation);
            StateHasChanged();
        }   
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     await viewModel.LoadGradesAsync(GradeService, Navigation);
    // }
}