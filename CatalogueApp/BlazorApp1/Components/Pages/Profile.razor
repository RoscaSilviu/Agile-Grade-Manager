@page "/profile"
@inject CatalogueApp.Components.Services.ProfileService ProfileService
@inject IJSRuntime jsRuntime
@using CatalogueApp.ViewModels
@rendermode InteractiveServer
<link href="css/profile.css" rel="stylesheet" />

<div class="profile-container">
    <div class="profile-card">
        <h3>User Profile</h3>
        @if (viewModel.IsLoading)
        {
            <p>Loading user information...</p>
        }
        else if (viewModel.User is not null)
        {
            <div class="profile-details">
                <p><strong>Name:</strong> @viewModel.User.Name @viewModel.User.Surname</p>
                <p><strong>Email:</strong> @viewModel.User.Email</p>
                <p><strong>Role:</strong> @viewModel.User.Role</p>
                <p><strong>Last Login:</strong> @viewModel.User.LastLogin.ToString("g")</p>
            </div>
            <button class="btn btn-primary mt-3" @onclick="viewModel.ToggleChangePassword">Change Password</button>

            @if (viewModel.IsChangePasswordVisible)
            {
                <EditForm Model="viewModel" OnValidSubmit="SubmitChangePassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Current Password</label>
                        <InputText type="password" @bind-Value="viewModel.CurrentPassword" class="form-control" />
                        <ValidationMessage For="@(() => viewModel.CurrentPassword)" class="validation-message" />
                    </div>
                    <div class="form-group">
                        <label>New Password</label>
                        <InputText type="password" @bind-Value="viewModel.NewPassword" class="form-control" />
                        <ValidationMessage For="@(() => viewModel.NewPassword)" class="validation-message" />
                    </div>
                    <div class="form-group">
                        <label>Confirm New Password</label>
                        <InputText type="password" @bind-Value="viewModel.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => viewModel.ConfirmPassword)" class="validation-message" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>

                @if (!string.IsNullOrEmpty(viewModel.ChangePasswordError))
                {
                    <div class="alert alert-danger mt-2">@viewModel.ChangePasswordError</div>
                }
                @if (!string.IsNullOrEmpty(viewModel.ChangePasswordSuccess))
                {
                    <div class="alert alert-success mt-2">@viewModel.ChangePasswordSuccess</div>
                }
            }
        }
    </div>
</div>

@code {
    /// <summary>
    /// ViewModel for managing the state and data of the user profile page.
    /// </summary>
    private ProfileViewModel viewModel = new ProfileViewModel();

    /// <summary>
    /// Loads the user's profile information after the component is rendered for the first time.
    /// </summary>
    /// <param name="firstRender">Indicates whether this is the first render of the component.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the user's profile information using the ProfileService.
            await viewModel.LoadProfileAsync(ProfileService);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles the submission of the change password form.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task SubmitChangePassword()
    {
        // Attempt to change the user's password using the ProfileService.
        await viewModel.ChangePasswordAsync(ProfileService);
        StateHasChanged();
    }
}