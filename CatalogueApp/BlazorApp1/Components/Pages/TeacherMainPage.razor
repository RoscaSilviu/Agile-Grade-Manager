@page "/teacher"
@inject NavigationManager Navigation
@inject CatalogueApp.Components.Services.ClassService ClassService
@inject IJSRuntime JS
@using CatalogueApp.Components.Models
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

<link href="css/teacher.css" rel="stylesheet" />

<div class="teacher-container">
    <div class="teacher-card">
        <h3 class="text-center mb-4" style="color: white;">Teacher Dashboard</h3>

        <div class="button-group">
            <button class="btn btn-primary" @onclick="() => NavigateToPage(myClassesRoute)">My Classes</button>
            <button class="btn btn-success" @onclick="() => NavigateToPage(gradesRoute)">Grades</button>
            <button class="btn btn-secondary" @onclick="ShowBackupModal">Local Backup</button>
        </div>
    </div>
</div>

@if (showBackupModal)
{
    <div class="management-modal">
        <div class="management-content">
            <h3>Local Backup</h3>
            <p>This will export the <strong>entire database</strong> to .txt and .json formats.</p>

            <div class="flex justify-end gap-2">
                <button class="btn btn-primary" @onclick="CreateLocalBackup">Generate .txt & .json</button>
                <button class="btn btn-secondary" @onclick="HideBackupModal">Cancel</button>
            </div>
        </div>
    </div>}

@code {
    private bool showBackupModal = false;
    private string myClassesRoute = "/my-classes";
    private string gradesRoute = "/teacher-grade-history";

    private void NavigateToPage(string url) => Navigation.NavigateTo(url);

    private Task ShowBackupModal()
    {
        showBackupModal = true;
        return Task.CompletedTask;
    }

    private Task HideBackupModal()
    {
        showBackupModal = false;
        return Task.CompletedTask;
    }

    private async Task CreateLocalBackup()
    {
		await ClassService.GetFullBackupAsync();
        showBackupModal = false;
    }

    private string FormatBackupAsReadableText(FullBackupModel full)
    {
        var sb = new StringBuilder();

        sb.AppendLine("📦 FULL DATABASE BACKUP");
        sb.AppendLine("========================\n");

        foreach (var teacher in full.Teachers)
        {
            sb.AppendLine($"👨‍🏫 Teacher: {teacher.Name} ({teacher.Email})");

            foreach (var cls in teacher.Classes)
            {
                sb.AppendLine($"\n  📚 Class: {cls.Name}");

                foreach (var assignment in cls.Assignments)
                {
                    sb.AppendLine($"    📝 Assignment: {assignment.Title} | Due: {assignment.DueDate:d} | Max Points: {assignment.MaxPoints}");
                }

                foreach (var student in cls.Students)
                {
                    sb.AppendLine($"    👤 Student: {student.Name} {student.Surname}");

                    foreach (var grade in student.Grades)
                    {
                        sb.AppendLine($"      🎓 Grade for {grade.AssignmentTitle}: {grade.Points ?? "N/A"}");
                    }
                }
            }
        }

        return sb.ToString();
    }

    
}
